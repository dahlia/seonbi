-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | SmartyPants for Korean language
--   
--   (TL;DR: See the <a>demo web app</a>.)
--   
--   Seonbi (선비) is an HTML preprocessor that makes typographic adjustments
--   to an HTML so that the result uses accurate punctuations according to
--   the modern Korean orthography. (It’s similar to what
--   <a>SmartyPants</a> does for text written in English.)
--   
--   It also transforms <tt>ko-Kore</tt> text (國漢文混用; <a>Korean mixed
--   script</a>) into <tt>ko-Hang</tt> text (한글전용; Hangul-only script).
--   
--   Seonbi provides a Haskell library, a CLI, and an HTTP API; any of them
--   can perform the following transformations:
--   
--   <ul>
--   <li>All hanja words (e.g., <tt>漢字</tt>) into corresponding hangul-only
--   words (e.g., <tt>한자</tt>)</li>
--   <li>Straight quotes and apostrophes (<tt>"</tt> &amp; <tt>'</tt>) into
--   curly quotes HTML entities (<tt>“</tt>, <tt>”</tt>, <tt>‘</tt>, &amp;
--   <tt>’</tt>)</li>
--   <li>Three consecutive periods (<tt>...</tt> or <tt>。。。</tt>) into an
--   ellipsis entity (<tt>…</tt>)</li>
--   <li>Classical (Chinese-style) stops (<tt>。</tt>, <tt>、</tt>,
--   <tt>？</tt>, &amp; <tt>！</tt>) into modern (English-style) stops
--   (<tt>.</tt>, <tt>,</tt>, <tt>?</tt>, &amp; <tt>!</tt>)</li>
--   <li>Pairs of less-than and greater-than inequality symbols
--   (<tt>&lt;</tt> &amp; <tt>&gt;</tt>) into pairs of proper angle quotes
--   (<tt>〈</tt> &amp; <tt>〉</tt>)</li>
--   <li>Pairs of two consecutive inequality symbols (<tt>&lt;&lt;</tt>
--   &amp; <tt>&gt;&gt;</tt>) into pairs of proper double angle quotes
--   (<tt>《</tt> &amp; <tt>》</tt>)</li>
--   <li>A hyphen (<tt>-</tt>) or hangul vowel <i>eu</i> (<tt>ㅡ</tt>)
--   surrounded by spaces, or two/three consecutive hyphens (<tt>--</tt> or
--   <tt>---</tt>) into a proper em dash (<tt>—</tt>)</li>
--   <li>A less-than inequality symbol followed by a hyphen or an equality
--   symbol (<tt>&lt;-</tt>, <tt>&lt;=</tt>) into arrows to the left
--   (<tt>←</tt>, <tt>⇐</tt>)</li>
--   <li>A hyphen or an equality symbol followed by a greater-than
--   inequality symbol (<tt>-&gt;</tt>, <tt>=&gt;</tt>) into arrows to the
--   right (<tt>→</tt>, <tt>⇒</tt>)</li>
--   <li>A hyphen or an equality symbol wrapped by inequality symbols
--   (<tt>&lt;-&gt;</tt>, <tt>&lt;=&gt;</tt>) into bi-directional arrows
--   (<tt>↔</tt>, <tt>⇔</tt>)</li>
--   </ul>
--   
--   Each transformations can be partially turned on and off, and some
--   transformations have many options.
--   
--   All transformations work with both plain texts and rich text tree. In
--   a similar way to SmartyPants, it does not modify characters within
--   several sensitive HTML elements like
--   <tt>&lt;pre&gt;</tt>/<tt>&lt;code&gt;</tt>/<tt>&lt;script&gt;</tt>/<tt>&lt;kbd&gt;</tt>.
--   Chinese/Japanese stops or hanzi/kanji characters inside elements with
--   <tt>lang="zh"</tt>/<tt>lang="ja"</tt><a>[1]</a> are never transformed.
--   
--   <h2>End-user apps</h2>
--   
--   
--   Technically, Seonbi is basically exposed as a software component,
--   which is also known as API (application programming interface), to be
--   used as a module of other softwares.
--   
--   However, as these official interfaces are not for humans but machines,
--   it’s not easy to use for end-users whom haven’t experienced software
--   programming. For such end-users, here’s the list of end-user apps:
--   
--   <ul>
--   <li><a>Demo web app</a>: The official web app. Not that
--   mobile-friendly (usable though).</li>
--   <li><a>Seonbi Translator</a> (선비 번역기): An iOS shortcut made by
--   <a>Heechan Bak</a> ([@channprj]).</li>
--   <li>Made by Lee Dogeon ([@moreal]).</li>
--   <li>[seonbi-ext]: A browser extension made by Lee Dogeon
--   ([@moreal]).</li>
--   </ul>
--   
--   <ul>
--   <li><i>@channprj</i> https://github.com/channprj <a>seonbi-webapp</a>:
--   https://github.com/moreal/seonbi-webapp [@moreal]:
--   https://github.com/moreal [seonbi-ext]:
--   https://github.com/moreal/seonbi-ext</li>
--   </ul>
--   
--   <h2>Installation</h2>
--   
--   
--   Seonbi provides official executable binaries for Linux (x86_64), macOS
--   (Apple silicon &amp; Intel), and Windows (64-bit). You can download
--   them from the <a>releases</a> page.
--   
--   If you prefer <a>Scoop</a> on Windows use the Seonbi official bucket:
--   
--   <pre>
--   scoop bucket add seonbi https://github.com/dahlia/seonbi.git
--   scoop install seonbi
--   </pre>
--   
--   It is also distributed as a <a>Docker image</a>:
--   
--   <pre>
--   $ echo '訓民正音' | docker run -i dahlia/seonbi:latest seonbi
--   훈민정음
--   </pre>
--   
--   If you’d like to use it on GitHub Actions there is <a>action
--   dahlia/seonbi/setup</a>:
--   
--   <pre>
--   - uses: dahlia/seonbi/setup
--   - run: seonbi -o output.html input.html
--   </pre>
--   
--   If you want to use it as a Haskell library install the <a>seonbi</a>
--   package using Stack or Cabal.
--   
--   <h2>CLI</h2>
--   
--   
--   The <tt>seonbi</tt> command basically takes the input HTML as standard
--   input, and then transforms it into the output HTML as standard output:
--   
--   <pre>
--   seonbi &lt; input.html &gt; output.html
--   </pre>
--   
--   You could pass a filename as an argument instead (and it is <tt>-</tt>
--   by default):
--   
--   <pre>
--   seonbi input.html &gt; output.html
--   </pre>
--   
--   There is <tt>-o</tt>/<tt>--output</tt> option as well:
--   
--   <pre>
--   seonbi -o output.html input.html
--   </pre>
--   
--   Although it automatically detects text encoding of the input file, you
--   could explicitly specify <tt>-e</tt>/<tt>--encoding</tt>:
--   
--   <pre>
--   seonbi -e euc-kr -o output.html input.html
--   </pre>
--   
--   Although there are several style options, e.g.,
--   <tt>-q</tt>/<tt>--quote</tt>, <tt>-c</tt>/<tt>--cite</tt>,
--   <tt>-r</tt>/<tt>--render-hanja</tt>, in most cases, giving
--   <tt>-p</tt>/<tt>--preset</tt> is enough:
--   
--   <pre>
--   echo '平壤 冷麵' | seonbi -p ko-kr  # 평양 냉면
--   echo '平壤 冷麵' | seonbi -p ko-kp  # 평양 랭면
--   </pre>
--   
--   Read <tt>-h</tt>/<tt>--help</tt> for details:
--   
--   <pre>
--   seonbi --help
--   </pre>
--   
--   <h2>HTTP API</h2>
--   
--   
--   The <tt>seonbi-api</tt> command starts an HTTP server that takes
--   <tt>POST</tt> requests with an HTML source with transformation
--   options, and responds with a transformed result HTML. You can decide a
--   hostname and a port number with <tt>-H</tt>/<tt>--host</tt> and
--   <tt>-p</tt>/<tt>--port</tt> options:
--   
--   <pre>
--   seonbi-api -H 0.0.0.0 -p 3800
--   </pre>
--   
--   The following is an example request:
--   
--   <pre>
--   POST / HTTP/1.1
--   Content-Type: application/json
--   Host: localhost:3800
--   
--   {
--     "preset": "ko-kr",
--     "contentType": "text/html",
--     "sourceHtml": "&lt;p&gt;하늘과 바람과 별과 詩&lt;/p&gt;"
--   }
--   </pre>
--   
--   The HTTP API server would respond like this:
--   
--   <pre>
--   HTTP/1.1 200 OK
--   Content-Type: application/json
--   Server: Seonbi/0.3.0
--   
--   {
--     "success": true,
--     "contentType": "text/html",
--     "resultHtml": "&lt;p&gt;하늘과 바람과 별과 시&lt;/p&gt;"
--   }
--   </pre>
--   
--   If a web app needs to use the HTTP API server, <a>CORS</a> should be
--   configured through <tt>--allow-origin</tt>/<tt>-o</tt> option:
--   
--   <pre>
--   seonbi-api -o https://example.com
--   </pre>
--   
--   To learn more about parameters interactively, try the <a>demo web
--   app</a>.
--   
--   <h2>Haskell API</h2>
--   
--   
--   All functions and types lie inside <tt>Text.Seonbi</tt> module and its
--   submodules. The highest-level API is <tt>Text.Seonbi.Facade</tt>
--   module.
--   
--   See also the <a>API docs</a> or <a>Hackage</a>.
--   
--   <h2>Deno API</h2>
--   
--   
--   There is a simple client library for Deno as well. See also the
--   <a>scripts/deno/</a> directory.
--   
--   <h2>License</h2>
--   
--   
--   Distributed under LGPL 2.1 or later.
--   
--   <h2>Etymology</h2>
--   
--   
--   <i><a>Seonbi</a></i> (선비) means a classical scholar during Joseon
--   periods (14c–19c). Today there’s a meme that calls a person who feels
--   morally superior or has elitism <i>seonbi</i> in the Korean internet.
--   So <i>seonbi</i> and <i>smarty pants</i> have some things in common.
--   
--   
--   <ol>
--   <li>Technically, only Korean contents and language-unspecified
--   elements are transformed. Elements having <tt>lang</tt> attribute with
--   language tags referring to any Korean language are treated as Korean
--   contents, e.g., <tt>ko</tt>, <tt>ko-Hang</tt>, <tt>kor-KP</tt>,
--   <tt>kor-Kore</tt>.</li>
--   </ol>
@package seonbi
@version 0.6.0

module Text.Seonbi.Hangul

-- | A triple of an initial consonant, a vowel, and an optional final
--   consonant.
type JamoTriple = (Char, Char, Maybe Char)

-- | Composes hangul jamo triple into a hangul syllable.
--   
--   <pre>
--   &gt;&gt;&gt; fromJamoTriple ('ᄀ', 'ᅡ', Nothing)
--   Just '가'
--   
--   &gt;&gt;&gt; fromJamoTriple ('ᄀ', 'ᅳ', Just 'ᆯ')
--   Just '글'
--   </pre>
fromJamoTriple :: JamoTriple -> Maybe Char

-- | Checks if a character is a hangul letter and a complete syllable.
--   
--   <pre>
--   &gt;&gt;&gt; isHangulSyllable '가'
--   True
--   
--   &gt;&gt;&gt; isHangulSyllable 'ㄱ'
--   False
--   </pre>
isHangulSyllable :: Char -> Bool

-- | Takes a complete hangul syllable apart into consonants and a vowel.
--   Returns <a>Nothing</a> for non-hangul letters.
--   
--   <pre>
--   &gt;&gt;&gt; toJamoTriple '가'
--   Just ('ᄀ','ᅡ',Nothing)
--   
--   &gt;&gt;&gt; toJamoTriple '글'
--   Just ('ᄀ','ᅳ',Just 'ᆯ')
--   
--   &gt;&gt;&gt; toJamoTriple 'A'
--   Nothing
--   </pre>
toJamoTriple :: Char -> Maybe JamoTriple

module Text.Seonbi.Html.Tag

-- | HTML tags. This enumeration type contains both HTML 5 and 4 tags for
--   maximum compatibility.
data HtmlTag
A :: HtmlTag
Abbr :: HtmlTag
Acronym :: HtmlTag
Address :: HtmlTag
Area :: HtmlTag
Article :: HtmlTag
Aside :: HtmlTag
Audio :: HtmlTag
B :: HtmlTag
Base :: HtmlTag
Bdi :: HtmlTag
Bdo :: HtmlTag
Big :: HtmlTag
BlockQuote :: HtmlTag
Body :: HtmlTag
BR :: HtmlTag
Button :: HtmlTag
Canvas :: HtmlTag
Caption :: HtmlTag
Center :: HtmlTag
Cite :: HtmlTag
Code :: HtmlTag
Col :: HtmlTag
ColGroup :: HtmlTag
Data :: HtmlTag
DataList :: HtmlTag
DD :: HtmlTag
Del :: HtmlTag
Details :: HtmlTag
Dfn :: HtmlTag
Dialog :: HtmlTag
Div :: HtmlTag
DL :: HtmlTag
DT :: HtmlTag
Em :: HtmlTag
Embed :: HtmlTag
FieldSet :: HtmlTag
FigCaption :: HtmlTag
Figure :: HtmlTag
Footer :: HtmlTag
Font :: HtmlTag
Form :: HtmlTag
H1 :: HtmlTag
H2 :: HtmlTag
H3 :: HtmlTag
H4 :: HtmlTag
H5 :: HtmlTag
H6 :: HtmlTag
Head :: HtmlTag
Header :: HtmlTag
HR :: HtmlTag
Html :: HtmlTag
I :: HtmlTag
IFrame :: HtmlTag
Img :: HtmlTag
Input :: HtmlTag
Ins :: HtmlTag
Kbd :: HtmlTag
Label :: HtmlTag
Legend :: HtmlTag
LI :: HtmlTag
Link :: HtmlTag
Main :: HtmlTag
Map :: HtmlTag
Mark :: HtmlTag
Meta :: HtmlTag
Meter :: HtmlTag
Nav :: HtmlTag
NoBR :: HtmlTag
NoScript :: HtmlTag
Object :: HtmlTag
OL :: HtmlTag
OptGroup :: HtmlTag
Option :: HtmlTag
Output :: HtmlTag
P :: HtmlTag
Param :: HtmlTag
Picture :: HtmlTag
Pre :: HtmlTag
Progress :: HtmlTag
Q :: HtmlTag
RB :: HtmlTag
RP :: HtmlTag
RT :: HtmlTag
RTC :: HtmlTag
Ruby :: HtmlTag
S :: HtmlTag
Samp :: HtmlTag
Script :: HtmlTag
Select :: HtmlTag
Section :: HtmlTag
Small :: HtmlTag
Source :: HtmlTag
Span :: HtmlTag
Strike :: HtmlTag
Strong :: HtmlTag
Style :: HtmlTag
Sub :: HtmlTag
Summary :: HtmlTag
Sup :: HtmlTag
Table :: HtmlTag
TBody :: HtmlTag
TD :: HtmlTag
Template :: HtmlTag
TFoot :: HtmlTag
TextArea :: HtmlTag
TH :: HtmlTag
THead :: HtmlTag
Time :: HtmlTag
Title :: HtmlTag
TR :: HtmlTag
Track :: HtmlTag
TT :: HtmlTag
U :: HtmlTag
UL :: HtmlTag
Var :: HtmlTag
Video :: HtmlTag
WBR :: HtmlTag
XMP :: HtmlTag

-- | The six <a>kinds of HTML elements</a>.
data HtmlTagKind
Void :: HtmlTagKind
Template' :: HtmlTagKind
RawText :: HtmlTagKind
EscapableRawText :: HtmlTagKind
Foreign :: HtmlTagKind
Normal :: HtmlTagKind

-- | Get the heading level of an <a>HtmlTag</a>, if it is a heading tag
--   (<a>H1</a> to <a>H6</a>).
--   
--   <pre>
--   &gt;&gt;&gt; headingLevel H1
--   Just 1
--   
--   &gt;&gt;&gt; headingLevel H6
--   Just 6
--   
--   &gt;&gt;&gt; headingLevel P
--   Nothing
--   </pre>
headingLevel :: HtmlTag -> Maybe Int

-- | Get the heading tag with the given heading level. If the level is
--   invalid, then <a>Nothing</a> is returned.
--   
--   <pre>
--   &gt;&gt;&gt; headingTag 1
--   Just H1
--   
--   &gt;&gt;&gt; headingTag 6
--   Just H6
--   
--   &gt;&gt;&gt; headingTag 7
--   Nothing
--   </pre>
headingTag :: Int -> Maybe HtmlTag

-- | Get the heading tag with the given heading level. If the level is
--   greater than 6, then <a>H6</a> is returned. If the level is less than
--   1, then <a>H1</a> is returned.
--   
--   <pre>
--   &gt;&gt;&gt; headingTag' 1
--   H1
--   
--   &gt;&gt;&gt; headingTag' 6
--   H6
--   
--   &gt;&gt;&gt; headingTag' 0
--   H1
--   
--   &gt;&gt;&gt; headingTag' 7
--   H6
--   </pre>
headingTag' :: Int -> HtmlTag

-- | The kind of an <a>HtmlTag</a>.
--   
--   <pre>
--   &gt;&gt;&gt; Data.Set.filter ((== EscapableRawText) . htmlTagKind) htmlTags
--   fromList [TextArea,Title]
--   </pre>
htmlTagKind :: HtmlTag -> HtmlTagKind

-- | The name of an <a>HtmlTag</a> in lowercase.
--   
--   <pre>
--   &gt;&gt;&gt; htmlTagName TextArea
--   "textarea"
--   </pre>
--   
--   <pre>
--   \ t -&gt; htmlTagName t == (toLower $ pack $ show (t :: HtmlTag))
--   </pre>
htmlTagName :: HtmlTag -> Text

-- | The map of tag names to <a>HtmlTag</a> values.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; Data.Map.Strict.lookup "blockquote" htmlTagNames
--   Just BlockQuote
--   </pre>
--   
--   <pre>
--   \ t -&gt; Data.Map.Strict.lookup (htmlTagName t) htmlTagNames == Just t
--   </pre>
htmlTagNames :: Map Text HtmlTag

-- | List all supported HTML tags.
--   
--   <pre>
--   &gt;&gt;&gt; htmlTags
--   fromList [A,Abbr,Acronym,Address,...,UL,Var,Video,WBR,XMP]
--   </pre>
htmlTags :: Set HtmlTag
instance GHC.Show.Show Text.Seonbi.Html.Tag.HtmlTagKind
instance GHC.Classes.Ord Text.Seonbi.Html.Tag.HtmlTagKind
instance GHC.Classes.Eq Text.Seonbi.Html.Tag.HtmlTagKind
instance GHC.Show.Show Text.Seonbi.Html.Tag.HtmlTag
instance GHC.Classes.Ord Text.Seonbi.Html.Tag.HtmlTag
instance GHC.Classes.Eq Text.Seonbi.Html.Tag.HtmlTag

module Text.Seonbi.Html.TagStack

-- | Represents a hierarchy of a currently parsing position in an
--   <a>HtmlTag</a> tree.
--   
--   For example, if an <tt>scanHtml</tt> has read "<tt>&lt;a
--   href="#"&gt;&lt;b&gt;&lt;i&gt;foo&lt;/i&gt; bar</tt>" it is
--   represented as <tt><a>HtmlTagStack</a> [<a>B</a>, <a>A</a>]</tt>.
--   
--   Note that the tags are stored in reverse order, from the deepest to
--   the shallowest, to make inserting a more deeper tag efficient.
data HtmlTagStack

-- | Determine whether any element of the tag stack satisfies the
--   predicate.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; Text.Seonbi.Html.TagStack.any ((== Void) . htmlTagKind) [Div, P, Script]
--   False
--   
--   &gt;&gt;&gt; Text.Seonbi.Html.TagStack.any ((== Void) . htmlTagKind) [BR, P, Script]
--   True
--   </pre>
any :: (HtmlTag -> Bool) -> HtmlTagStack -> Bool

-- | Check if a node (<tt>HtmlEntity</tt>) that a <a>HtmlTagStack</a> (the
--   first argument) refers is contained by a node that another
--   <a>HtmlTagStack</a> (the second argument), or they are sibling at
--   least.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; descendsFrom [Div, P, A, Em] [Div, P, A]
--   True
--   
--   &gt;&gt;&gt; descendsFrom [Div, P, A] [Div, P, A]
--   True
--   
--   &gt;&gt;&gt; descendsFrom [Div, P, Em] [Div, P, A]
--   False
--   
--   &gt;&gt;&gt; descendsFrom [Div, P] [Div, P, A]
--   False
--   </pre>
descendsFrom :: HtmlTagStack -> HtmlTagStack -> Bool

-- | Determine whether the element occurs in the tag stack.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; A `Text.Seonbi.Html.TagStack.elem` [A, B, Code]
--   True
--   
--   &gt;&gt;&gt; Em `Text.Seonbi.Html.TagStack.elem` [A, B, Code]
--   False
--   </pre>
elem :: HtmlTag -> HtmlTagStack -> Bool

-- | Count the depth of a stack.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; depth empty
--   0
--   
--   &gt;&gt;&gt; depth [Div, Article, P, Em]
--   4
--   </pre>
depth :: HtmlTagStack -> Int

-- | An empty stack.
empty :: HtmlTagStack

-- | The <a>fromList</a> function constructs the structure <tt>l</tt> from
--   the given list of <tt>Item l</tt>
fromList :: IsList l => [Item l] -> l

-- | Get the deepest tag from a <a>HtmlTagStack</a>.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; let stack = [Div, Article, P, Em] :: HtmlTagStack
--   
--   &gt;&gt;&gt; last stack
--   Just Em
--   
--   &gt;&gt;&gt; last []
--   Nothing
--   </pre>
last :: HtmlTagStack -> Maybe HtmlTag

-- | Pop the deepest <tt>tag</tt> from a <a>HtmlTagStack</a>.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; pop Em [A, B, Em]
--   fromList [A,B]
--   </pre>
--   
--   It may pop a <tt>tag</tt> in the middle if a <tt>tag</tt> looking for
--   is not the deepest:
--   
--   <pre>
--   &gt;&gt;&gt; pop B [A, B, Em]
--   fromList [A,Em]
--   </pre>
--   
--   It does not affect to the input if there is no such <tt>tag</tt> in
--   the input:
--   
--   <pre>
--   &gt;&gt;&gt; pop P [A, B, Em]
--   fromList [A,B,Em]
--   
--   &gt;&gt;&gt; pop A empty
--   fromList []
--   </pre>
pop :: HtmlTag -> HtmlTagStack -> HtmlTagStack

-- | Push one deeper <tt>tag</tt> to a <a>HtmlTagStack</a>.
--   
--   <pre>
--   &gt;&gt;&gt; push A empty
--   fromList [A]
--   
--   &gt;&gt;&gt; push B (push A empty)
--   fromList [A,B]
--   </pre>
push :: HtmlTag -> HtmlTagStack -> HtmlTagStack

-- | Build a new stack from a stack by replacing its bottom with a new
--   base.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; rebase [Article, BlockQuote] [Div] [Article, BlockQuote, P, Em]
--   fromList [Div,P,Em]
--   </pre>
--   
--   If there are no such bottom elements, it replaces nothing.
--   
--   <pre>
--   &gt;&gt;&gt; rebase [Div, Article, BlockQuote] [Div] [Article, BlockQuote, P, Em]
--   fromList [Article,BlockQuote,P,Em]
--   </pre>
rebase :: HtmlTagStack -> HtmlTagStack -> HtmlTagStack -> HtmlTagStack

-- | The <a>toList</a> function extracts a list of <tt>Item l</tt> from the
--   structure <tt>l</tt>. It should satisfy fromList . toList = id.
toList :: IsList l => l -> [Item l]
instance GHC.Classes.Ord Text.Seonbi.Html.TagStack.HtmlTagStack
instance GHC.Classes.Eq Text.Seonbi.Html.TagStack.HtmlTagStack
instance GHC.Exts.IsList Text.Seonbi.Html.TagStack.HtmlTagStack
instance GHC.Show.Show Text.Seonbi.Html.TagStack.HtmlTagStack

module Text.Seonbi.Html.Entity

-- | An event entity emitted by <tt>scanHtml</tt>.
data HtmlEntity

-- | Represent a token which <a>opens an HTML element</a>.
--   
--   Note that <a>rawAttributes</a> is not a parsed and structured data but
--   a raw string as its name implies.
--   
--   The <a>tagStack</a> doesn't include the corresponding opened
--   <a>tag</a>.
HtmlStartTag :: HtmlTagStack -> HtmlTag -> HtmlRawAttrs -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[tag] :: HtmlEntity -> HtmlTag
[rawAttributes] :: HtmlEntity -> HtmlRawAttrs

-- | Represent a token which <a>closes an HTML element</a>. The
--   <a>tagStack</a> doesn't include the corresponding closed <a>tag</a>.
HtmlEndTag :: HtmlTagStack -> HtmlTag -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[tag] :: HtmlEntity -> HtmlTag

-- | Represent a token of a text node. Note that <a>rawText</a> is not a
--   parsed and structured data but a raw string as its name implies. There
--   can be continuously more than one <a>HtmlText</a> values can be
--   emitted even if they are not separated by element openings or
--   closings.
HtmlText :: HtmlTagStack -> Text -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[rawText] :: HtmlEntity -> Text

-- | Represent a token of a <a>CDATA section</a>.
HtmlCdata :: HtmlTagStack -> Text -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[text] :: HtmlEntity -> Text

-- | Represent a token of an <a>HTML comment</a>.
HtmlComment :: HtmlTagStack -> Text -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[comment] :: HtmlEntity -> Text

-- | All element attributes in a string.
type HtmlRawAttrs = Text
instance GHC.Show.Show Text.Seonbi.Html.Entity.HtmlEntity
instance GHC.Classes.Ord Text.Seonbi.Html.Entity.HtmlEntity
instance GHC.Classes.Eq Text.Seonbi.Html.Entity.HtmlEntity

module Text.Seonbi.Html.Scanner
data Result r
Fail :: Text -> [String] -> String -> Result r
Done :: Text -> r -> Result r
scanHtml :: Text -> Result [HtmlEntity]

module Text.Seonbi.Html.Printer

-- | Print the list of <a>HtmlEntity</a> into a lazy <a>Text</a>.
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens = scanHtml "&lt;p&gt;Hello,&lt;br&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printHtml tokens
--   "&lt;p&gt;Hello,&lt;br&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   </pre>
printHtml :: [HtmlEntity] -> Text

-- | Print only the text contents (including CDATA sections) without tags
--   into a lazy <a>Text</a>.
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens = scanHtml "&lt;p&gt;Hello,&lt;br&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printText tokens
--   "Hello,\nworld!"
--   </pre>
--   
--   Entities are decoded:
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens = scanHtml "&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;&amp;quot;&amp;amp;&lt;/code&gt;&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printText tokens
--   "&lt;&gt;\"&amp;"
--   </pre>
printText :: [HtmlEntity] -> Text

-- | Similar to <a>printHtml</a> except it renders void (self-closing) tags
--   as like <tt><a>br/</a></tt> instead of <tt><a>br</a></tt>.
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens = scanHtml "&lt;p&gt;Hello,&lt;br&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printXhtml tokens
--   "&lt;p&gt;Hello,&lt;br/&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   </pre>
--   
--   Note that normal tags are not rendered as self-closed; only void tags
--   according to HTML specification are:
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens' = scanHtml "&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printXhtml tokens'
--   "&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;"
--   </pre>
printXhtml :: [HtmlEntity] -> Text

module Text.Seonbi.Html.Preservation

-- | <a>True</a> if the given HTML entity should be preserved from
--   transformation.
isPreservedEntity :: HtmlEntity -> Bool

-- | <a>True</a> if the given tag should be preserved from transformation.
isPreservedTag :: HtmlTag -> Bool

-- | <a>True</a> if the given tag stack should be preserved from
--   transformation.
isPreservedTagStack :: HtmlTagStack -> Bool

module Text.Seonbi.Html.Lang

-- | Annotates <a>HtmlEntity</a> with the <a>lang</a> tag extracted from it
--   or its ancestors.
data LangHtmlEntity
LangHtmlEntity :: Maybe LanguageTag -> HtmlEntity -> LangHtmlEntity

-- | The <tt>lang</tt> tag extracted from the HTML <a>entity</a> or its
--   ancestors.
[lang] :: LangHtmlEntity -> Maybe LanguageTag

-- | The annotated HTML <a>entity</a>.
[entity] :: LangHtmlEntity -> HtmlEntity

-- | Represents a language tag. Although it is defined as an alias for
--   <a>Text</a>, it can be structured in the future. Do not use its
--   contents directly.
type LanguageTag = Text

-- | Annotates the given HTML entities with the language tag extracted from
--   their <tt>lang</tt> attributes. If a parent entity has <tt>lang</tt>
--   attribute, its all descendants are annotated with the same language
--   tag.
annotateWithLang :: [HtmlEntity] -> [LangHtmlEntity]

-- | Extracts the language tag from the given raw HTML attributes if it has
--   <tt>lang</tt> attribute.
--   
--   <pre>
--   &gt;&gt;&gt; extractLang ""
--   Nothing
--   
--   &gt;&gt;&gt; extractLang "lang=en"
--   Just "en"
--   
--   &gt;&gt;&gt; extractLang "lang=\"ko-KR\""
--   Just "ko-kr"
--   
--   &gt;&gt;&gt; extractLang " lang='ko-Hang'"
--   Just "ko-hang"
--   </pre>
extractLang :: HtmlRawAttrs -> Maybe LanguageTag

-- | Determines whether the given language tag refers to any kind of
--   Korean.
--   
--   <pre>
--   &gt;&gt;&gt; isKorean "ko"
--   True
--   
--   &gt;&gt;&gt; isKorean "ko-KR"
--   True
--   
--   &gt;&gt;&gt; isKorean "kor-Hang"
--   True
--   
--   &gt;&gt;&gt; isKorean "en"
--   False
--   
--   &gt;&gt;&gt; isKorean "en-KR"
--   False
--   </pre>
isKorean :: LanguageTag -> Bool

-- | Determines whether the given language tag undoubtedly does not refer
--   to any kind of Korean.
--   
--   <pre>
--   &gt;&gt;&gt; isNeverKorean $ Just "ko"
--   False
--   
--   &gt;&gt;&gt; isNeverKorean $ Just "ko-KR"
--   False
--   
--   &gt;&gt;&gt; isNeverKorean Nothing
--   False
--   
--   &gt;&gt;&gt; isNeverKorean $ Just "en"
--   True
--   </pre>
isNeverKorean :: Maybe LanguageTag -> Bool
instance GHC.Classes.Eq Text.Seonbi.Html.Lang.LangHtmlEntity
instance GHC.Show.Show Text.Seonbi.Html.Lang.LangHtmlEntity

module Text.Seonbi.Html.TextNormalizer

-- | Escape special (control) characters into corresponding character
--   entities in the given HTML text.
--   
--   <pre>
--   &gt;&gt;&gt; escapeHtmlEntities "&lt;foo &amp; \"bar\"&gt;"
--   "&amp;lt;foo &amp;amp; &amp;quot;bar&amp;quot;&amp;gt;"
--   </pre>
escapeHtmlEntities :: Text -> Text

-- | Transform a given <a>HtmlCdata</a> node into an equivalent
--   <a>HtmlText</a> node.
--   
--   <pre>
--   &gt;&gt;&gt; import Text.Seonbi.Html.Tag
--   
--   &gt;&gt;&gt; normalizeCdata HtmlCdata { tagStack = [P], text = "&lt;p id=\"foo\"&gt;" }
--   HtmlText {tagStack = fromList [P], rawText = "&amp;lt;p id=&amp;quot;foo&amp;quot;&amp;gt;"}
--   </pre>
normalizeCdata :: HtmlEntity -> HtmlEntity

-- | As <tt>scanHtml</tt> may emit two or more continuous <a>HtmlText</a>
--   fragments even if these can be represented as only one <a>HtmlText</a>
--   fragment, it makes postprocessing hard.
--   
--   The <a>normalizeText</a> function concatenates such continuous
--   <a>HtmlText</a> fragments into one if possible so that postprocessing
--   can be easy:
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings -XOverloadedLists
--   
--   &gt;&gt;&gt; normalizeText [HtmlText [] "Hello, ", HtmlText [] "world!"]
--   [HtmlText {tagStack = fromList [], rawText = "Hello, world!"}]
--   </pre>
--   
--   It also transforms all <a>HtmlCdata</a> fragments into an
--   <a>HtmlText</a> together.
--   
--   <pre>
--   &gt;&gt;&gt; :{
--   normalizeText [ HtmlText [] "foo "
--                 , HtmlCdata [] "&lt;bar&gt;", HtmlText [] " baz!"
--                 ]
--   :}
--   [HtmlText {tagStack = fromList [], rawText = "foo &amp;lt;bar&amp;gt; baz!"}]
--   </pre>
normalizeText :: [HtmlEntity] -> [HtmlEntity]


-- | Since Seonbi's primitive unit to transform is HTML, this module deals
--   with HTML.
module Text.Seonbi.Html
data Result r
Fail :: Text -> [String] -> String -> Result r
Done :: Text -> r -> Result r
scanHtml :: Text -> Result [HtmlEntity]

-- | Print the list of <a>HtmlEntity</a> into a lazy <a>Text</a>.
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens = scanHtml "&lt;p&gt;Hello,&lt;br&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printHtml tokens
--   "&lt;p&gt;Hello,&lt;br&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   </pre>
printHtml :: [HtmlEntity] -> Text

-- | Print only the text contents (including CDATA sections) without tags
--   into a lazy <a>Text</a>.
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens = scanHtml "&lt;p&gt;Hello,&lt;br&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printText tokens
--   "Hello,\nworld!"
--   </pre>
--   
--   Entities are decoded:
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens = scanHtml "&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;&amp;quot;&amp;amp;&lt;/code&gt;&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printText tokens
--   "&lt;&gt;\"&amp;"
--   </pre>
printText :: [HtmlEntity] -> Text

-- | Similar to <a>printHtml</a> except it renders void (self-closing) tags
--   as like <tt><a>br/</a></tt> instead of <tt><a>br</a></tt>.
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens = scanHtml "&lt;p&gt;Hello,&lt;br&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printXhtml tokens
--   "&lt;p&gt;Hello,&lt;br/&gt;\n&lt;em&gt;world&lt;/em&gt;!&lt;/p&gt;"
--   </pre>
--   
--   Note that normal tags are not rendered as self-closed; only void tags
--   according to HTML specification are:
--   
--   <pre>
--   &gt;&gt;&gt; let Done "" tokens' = scanHtml "&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;"
--   
--   &gt;&gt;&gt; printXhtml tokens'
--   "&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;"
--   </pre>
printXhtml :: [HtmlEntity] -> Text

-- | An event entity emitted by <tt>scanHtml</tt>.
data HtmlEntity

-- | Represent a token which <a>opens an HTML element</a>.
--   
--   Note that <a>rawAttributes</a> is not a parsed and structured data but
--   a raw string as its name implies.
--   
--   The <a>tagStack</a> doesn't include the corresponding opened
--   <a>tag</a>.
HtmlStartTag :: HtmlTagStack -> HtmlTag -> HtmlRawAttrs -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[tag] :: HtmlEntity -> HtmlTag
[rawAttributes] :: HtmlEntity -> HtmlRawAttrs

-- | Represent a token which <a>closes an HTML element</a>. The
--   <a>tagStack</a> doesn't include the corresponding closed <a>tag</a>.
HtmlEndTag :: HtmlTagStack -> HtmlTag -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[tag] :: HtmlEntity -> HtmlTag

-- | Represent a token of a text node. Note that <a>rawText</a> is not a
--   parsed and structured data but a raw string as its name implies. There
--   can be continuously more than one <a>HtmlText</a> values can be
--   emitted even if they are not separated by element openings or
--   closings.
HtmlText :: HtmlTagStack -> Text -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[rawText] :: HtmlEntity -> Text

-- | Represent a token of a <a>CDATA section</a>.
HtmlCdata :: HtmlTagStack -> Text -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[text] :: HtmlEntity -> Text

-- | Represent a token of an <a>HTML comment</a>.
HtmlComment :: HtmlTagStack -> Text -> HtmlEntity

-- | A stack of <a>HtmlTag</a>s that represents a hierarchy of a currently
--   parsing position in an <a>HtmlTag</a> tree.
[tagStack] :: HtmlEntity -> HtmlTagStack
[comment] :: HtmlEntity -> Text

-- | All element attributes in a string.
type HtmlRawAttrs = Text

-- | HTML tags. This enumeration type contains both HTML 5 and 4 tags for
--   maximum compatibility.
data HtmlTag
A :: HtmlTag
Abbr :: HtmlTag
Acronym :: HtmlTag
Address :: HtmlTag
Area :: HtmlTag
Article :: HtmlTag
Aside :: HtmlTag
Audio :: HtmlTag
B :: HtmlTag
Base :: HtmlTag
Bdi :: HtmlTag
Bdo :: HtmlTag
Big :: HtmlTag
BlockQuote :: HtmlTag
Body :: HtmlTag
BR :: HtmlTag
Button :: HtmlTag
Canvas :: HtmlTag
Caption :: HtmlTag
Center :: HtmlTag
Cite :: HtmlTag
Code :: HtmlTag
Col :: HtmlTag
ColGroup :: HtmlTag
Data :: HtmlTag
DataList :: HtmlTag
DD :: HtmlTag
Del :: HtmlTag
Details :: HtmlTag
Dfn :: HtmlTag
Dialog :: HtmlTag
Div :: HtmlTag
DL :: HtmlTag
DT :: HtmlTag
Em :: HtmlTag
Embed :: HtmlTag
FieldSet :: HtmlTag
FigCaption :: HtmlTag
Figure :: HtmlTag
Footer :: HtmlTag
Font :: HtmlTag
Form :: HtmlTag
H1 :: HtmlTag
H2 :: HtmlTag
H3 :: HtmlTag
H4 :: HtmlTag
H5 :: HtmlTag
H6 :: HtmlTag
Head :: HtmlTag
Header :: HtmlTag
HR :: HtmlTag
Html :: HtmlTag
I :: HtmlTag
IFrame :: HtmlTag
Img :: HtmlTag
Input :: HtmlTag
Ins :: HtmlTag
Kbd :: HtmlTag
Label :: HtmlTag
Legend :: HtmlTag
LI :: HtmlTag
Link :: HtmlTag
Main :: HtmlTag
Map :: HtmlTag
Mark :: HtmlTag
Meta :: HtmlTag
Meter :: HtmlTag
Nav :: HtmlTag
NoBR :: HtmlTag
NoScript :: HtmlTag
Object :: HtmlTag
OL :: HtmlTag
OptGroup :: HtmlTag
Option :: HtmlTag
Output :: HtmlTag
P :: HtmlTag
Param :: HtmlTag
Picture :: HtmlTag
Pre :: HtmlTag
Progress :: HtmlTag
Q :: HtmlTag
RB :: HtmlTag
RP :: HtmlTag
RT :: HtmlTag
RTC :: HtmlTag
Ruby :: HtmlTag
S :: HtmlTag
Samp :: HtmlTag
Script :: HtmlTag
Select :: HtmlTag
Section :: HtmlTag
Small :: HtmlTag
Source :: HtmlTag
Span :: HtmlTag
Strike :: HtmlTag
Strong :: HtmlTag
Style :: HtmlTag
Sub :: HtmlTag
Summary :: HtmlTag
Sup :: HtmlTag
Table :: HtmlTag
TBody :: HtmlTag
TD :: HtmlTag
Template :: HtmlTag
TFoot :: HtmlTag
TextArea :: HtmlTag
TH :: HtmlTag
THead :: HtmlTag
Time :: HtmlTag
Title :: HtmlTag
TR :: HtmlTag
Track :: HtmlTag
TT :: HtmlTag
U :: HtmlTag
UL :: HtmlTag
Var :: HtmlTag
Video :: HtmlTag
WBR :: HtmlTag
XMP :: HtmlTag

-- | The six <a>kinds of HTML elements</a>.
data HtmlTagKind
Void :: HtmlTagKind
Template' :: HtmlTagKind
RawText :: HtmlTagKind
EscapableRawText :: HtmlTagKind
Foreign :: HtmlTagKind
Normal :: HtmlTagKind

-- | The kind of an <a>HtmlTag</a>.
--   
--   <pre>
--   &gt;&gt;&gt; Data.Set.filter ((== EscapableRawText) . htmlTagKind) htmlTags
--   fromList [TextArea,Title]
--   </pre>
htmlTagKind :: HtmlTag -> HtmlTagKind

-- | The name of an <a>HtmlTag</a> in lowercase.
--   
--   <pre>
--   &gt;&gt;&gt; htmlTagName TextArea
--   "textarea"
--   </pre>
--   
--   <pre>
--   \ t -&gt; htmlTagName t == (toLower $ pack $ show (t :: HtmlTag))
--   </pre>
htmlTagName :: HtmlTag -> Text

-- | As <tt>scanHtml</tt> may emit two or more continuous <a>HtmlText</a>
--   fragments even if these can be represented as only one <a>HtmlText</a>
--   fragment, it makes postprocessing hard.
--   
--   The <a>normalizeText</a> function concatenates such continuous
--   <a>HtmlText</a> fragments into one if possible so that postprocessing
--   can be easy:
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings -XOverloadedLists
--   
--   &gt;&gt;&gt; normalizeText [HtmlText [] "Hello, ", HtmlText [] "world!"]
--   [HtmlText {tagStack = fromList [], rawText = "Hello, world!"}]
--   </pre>
--   
--   It also transforms all <a>HtmlCdata</a> fragments into an
--   <a>HtmlText</a> together.
--   
--   <pre>
--   &gt;&gt;&gt; :{
--   normalizeText [ HtmlText [] "foo "
--                 , HtmlCdata [] "&lt;bar&gt;", HtmlText [] " baz!"
--                 ]
--   :}
--   [HtmlText {tagStack = fromList [], rawText = "foo &amp;lt;bar&amp;gt; baz!"}]
--   </pre>
normalizeText :: [HtmlEntity] -> [HtmlEntity]

-- | Represents a hierarchy of a currently parsing position in an
--   <a>HtmlTag</a> tree.
--   
--   For example, if an <tt>scanHtml</tt> has read "<tt>&lt;a
--   href="#"&gt;&lt;b&gt;&lt;i&gt;foo&lt;/i&gt; bar</tt>" it is
--   represented as <tt><a>HtmlTagStack</a> [<a>B</a>, <a>A</a>]</tt>.
--   
--   Note that the tags are stored in reverse order, from the deepest to
--   the shallowest, to make inserting a more deeper tag efficient.
data HtmlTagStack

module Text.Seonbi.Html.Clipper

-- | Clip the given prefix text from the HTML fragments. If its first text
--   element does not have the same prefix, or the first element is not an
--   <a>HtmlText</a> node, or the list of HTML fragments have nothing at
--   all, it returns <a>Nothing</a>.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; clipPrefixText "foo" [HtmlText [] "bar", HtmlStartTag [] P ""]
--   Nothing
--   
--   &gt;&gt;&gt; clipPrefixText "foo" [HtmlStartTag [] P "", HtmlText [] "foo"]
--   Nothing
--   
--   &gt;&gt;&gt; clipPrefixText "foo" []
--   Nothing
--   </pre>
--   
--   If the first element is an <a>HtmlText</a> node, and its
--   <a>rawText</a> contains the common prefix text, it returns a
--   <a>Just</a> value holding a list of HTML fragments with the common
--   prefix removed.
--   
--   <pre>
--   &gt;&gt;&gt; clipPrefixText "foo" [HtmlText [] "foobar", HtmlStartTag [] P ""]
--   Just [HtmlText {... "bar"},HtmlStartTag {...}]
--   
--   &gt;&gt;&gt; clipPrefixText "foo" [HtmlText [] "foo", HtmlStartTag [] P ""]
--   Just [HtmlStartTag {..., tag = P, ...}]
--   </pre>
--   
--   A given text is treated as a raw text, which means even if some HTML
--   entities refer to the same characters it may fails to match unless
--   they share the exactly same representation, e.g.:
--   
--   <pre>
--   &gt;&gt;&gt; clipPrefixText "&amp;amp;" [HtmlText [] "&amp;AMP;"]
--   Nothing
--   </pre>
--   
--   In the same manner, it doesn't find a prefix from <a>HtmlCdata</a>,
--   e.g.:
--   
--   <pre>
--   &gt;&gt;&gt; clipPrefixText "foo" [HtmlCdata [] "foo", HtmlStartTag [] P ""]
--   Nothing
--   </pre>
--   
--   In order to remove a prefix from both <a>HtmlText</a> and
--   <a>HtmlCdata</a>, apply <a>normalizeText</a> first so that all
--   <a>HtmlCdata</a> entities are transformed to equivalent
--   <a>HtmlText</a> entities:
--   
--   <pre>
--   &gt;&gt;&gt; import Text.Seonbi.Html.TextNormalizer (normalizeText)
--   
--   &gt;&gt;&gt; let normalized = normalizeText [HtmlCdata [] "foo", HtmlStartTag [] P ""]
--   
--   &gt;&gt;&gt; clipPrefixText "foo" normalized
--   Just [HtmlStartTag {..., tag = P, ...}]
--   </pre>
--   
--   Plus, it works even if HTML fragments contain some <a>HtmlComment</a>
--   entities, but these are not touched at all, e.g.:
--   
--   <pre>
--   &gt;&gt;&gt; clipPrefixText "bar" [HtmlComment [] "foo", HtmlText [] "barbaz"]
--   Just [HtmlComment {... "foo"},HtmlText {... "baz"}]
--   </pre>
clipPrefixText :: Text -> [HtmlEntity] -> Maybe [HtmlEntity]

-- | Clip the given suffix text from the HTML fragments, in the same manner
--   to <a>clipPrefixText</a>.
clipSuffixText :: Text -> [HtmlEntity] -> Maybe [HtmlEntity]

-- | Clip the given prefix text and suffix text from the HTML fragments. It
--   simply is composed of <a>clipPrefixText</a> and <a>clipSuffixText</a>
--   functions. It returns <a>Nothing</a> if any of a prefix and a suffix
--   does not match.
clipText :: Text -> Text -> [HtmlEntity] -> Maybe [HtmlEntity]

module Text.Seonbi.ContentTypes

-- | Represents a case-insensitive content type.
type ContentType = MediaType

-- | Represents a function that transforms an <a>HtmlEntity</a> list.
type HtmlTransformer m = (Monad m, MonadFail m) => [HtmlEntity] -> m [HtmlEntity]

-- | Represents a function that transforms a text.
type TextTransformer m = (Monad m, MonadFail m) => Text -> m Text

-- | Transforms an <a>HtmlTransformer</a> into a <a>TextTransformer</a>
--   which transforms a CommonMark (Markdown) text.
asCommonMarkTransformer :: (Monad m, MonadFail m) => TransformerTransformer m

-- | Transforms an <a>HtmlTransformer</a> into a <a>TextTransformer</a>
--   which transforms an HTML text.
asHtmlTransformer :: (Monad m, MonadFail m) => TransformerTransformer m

-- | Gets a <a>TransformerTransformer</a> that transforms
--   <a>HtmlTransformer</a> into a <a>TextTransformer</a> which transforms
--   an HTML/XHTML text.
asHtmlTransformer' :: (Monad m, MonadFail m) => Bool -> TransformerTransformer m

-- | Transforms an <a>HtmlTransformer</a> into a <a>TextTransformer</a>
--   which transforms a plain text.
asPlainTextTransformer :: (Monad m, MonadFail m) => TransformerTransformer m

-- | Transforms an <a>HtmlTransformer</a> into a <a>TextTransformer</a>
--   which transforms an XHTML text.
asXhtmlTransformer :: (Monad m, MonadFail m) => TransformerTransformer m

-- | Converts a <a>Text</a> to a <a>ContentType</a>.
contentTypeFromText :: Text -> Maybe ContentType

-- | Supported content types.
contentTypes :: Set ContentType

-- | Converts a <a>ContentType</a> to a <a>Text</a>.
contentTypeText :: ContentType -> Text

-- | Applies an <a>HtmlTransformer</a> to the given text with respect to
--   the given content type.
transformWithContentType :: (Monad m, MonadFail m) => ContentType -> HtmlTransformer m -> Text -> m Text

module Text.Seonbi.Html.Wrapper

-- | A shortcut to <a>isWrappedBy'</a> of wildcard attributes match.
isWrappedBy :: [HtmlEntity] -> HtmlTag -> Bool

-- | <a>True</a> if the given <tt>[<a>HtmlEntity</a>]</tt> is wrapped by a
--   tag and attributes. E.g.:
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists
--   
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; :{
--   let entities = 
--           [ HtmlStartTag [] Em " id=foo"
--           , HtmlText [Em] "Hello"
--           , HtmlEndTag [] Em
--           ] :: [HtmlEntity]
--   :}
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isWrappedBy' entities Em $ Just " id=foo"
--   True
--   
--   &gt;&gt;&gt; isWrappedBy' entities Div $ Just " id=foo"
--   False
--   
--   &gt;&gt;&gt; isWrappedBy' entities Em $ Just " id=wrong"
--   False
--   </pre>
--   
--   In order to match to any attributes (wildcard match), give
--   <a>Nothing</a> to the third argument:
--   
--   <pre>
--   &gt;&gt;&gt; isWrappedBy' entities Em Nothing
--   True
--   
--   &gt;&gt;&gt; isWrappedBy' entities Span Nothing
--   False
--   </pre>
--   
--   Or you can use <a>isWrappedBy</a> function which is a shortcut for
--   that.
isWrappedBy' :: [HtmlEntity] -> HtmlTag -> Maybe HtmlRawAttrs -> Bool

-- | Wraps given entities with an element.
wrap :: HtmlTagStack -> HtmlTag -> HtmlRawAttrs -> [HtmlEntity] -> [HtmlEntity]

module Text.Seonbi.PairedTransformer

-- | Settings for <a>transformPairs</a>.
data PairedTransformer match
PairedTransformer :: (HtmlTagStack -> Bool) -> ([match] -> Text -> Maybe (match, Text, Text, Text)) -> (Text -> Maybe (match, Text, Text, Text)) -> (match -> match -> Bool) -> (match -> match -> [HtmlEntity] -> [HtmlEntity]) -> PairedTransformer match
[ignoresTagStack] :: PairedTransformer match -> HtmlTagStack -> Bool
[matchStart] :: PairedTransformer match -> [match] -> Text -> Maybe (match, Text, Text, Text)
[matchEnd] :: PairedTransformer match -> Text -> Maybe (match, Text, Text, Text)
[areMatchesPaired] :: PairedTransformer match -> match -> match -> Bool
[transformPair] :: PairedTransformer match -> match -> match -> [HtmlEntity] -> [HtmlEntity]

-- | Some transformations should be done only if a start and an end are
--   paired like parentheses. These even usually can be nested. Even if
--   there is a start and an end they should not be paired unless they are
--   sibling in an HTML tree.
--   
--   These kinds of scanning are easily turned highly stateful and
--   imperative, hence hard to debug. This base class provides the common
--   logic between these kinds of paired transformations so that an
--   implementation class fill several abstract methods triggered by the
--   state machine.
transformPairs :: forall m. PairedTransformer m -> [HtmlEntity] -> [HtmlEntity]


-- | This module deals with punctuations in Korean text.
module Text.Seonbi.Punctuation

-- | Substitution options for <a>transformArrow</a> function. These options
--   can be composited as an element of a set.
--   
--   <ul>
--   <li><tt>[]</tt>: Transform only leftwards and rightwards arrows.</li>
--   <li><tt>[<a>LeftRight</a>]</tt>: Transform bi-directional arrows as
--   well as left/rightwards arrows.</li>
--   <li><tt>[<a>DoubleArrow</a>]</tt>: Transform double arrows as well as
--   single arrows.</li>
--   <li><tt>[<a>LeftRight</a>, <a>DoubleArrow</a>]</tt>: Transform all
--   types of arrows.</li>
--   </ul>
data ArrowTransformationOption

-- | A bidirect arrow (e.g., ↔︎).
LeftRight :: ArrowTransformationOption

-- | An arrow which has two lines (e.g., ⇒).
DoubleArrow :: ArrowTransformationOption

-- | Transforms hyphens and less-than and greater-than inequality symbols
--   that mimic arrows into actual arrow characters:
--   
--   <ul>
--   <li><tt>-&gt;</tt> turns into <tt>→</tt> (U+2192 RIGHTWARDS
--   ARROW).</li>
--   <li><tt>&lt;-</tt> turns into <tt>←</tt> (U+2190 LEFTWARDS
--   ARROW).</li>
--   <li><tt>&lt;-&gt;</tt> turns into <tt>↔</tt> (U+2194 LEFT RIGHT ARROW)
--   if <a>LeftRight</a> is configured.</li>
--   <li><tt>=&gt;</tt> turns into <tt>⇒</tt> (U+21D2 RIGHTWARDS DOUBLE
--   ARROW) if <a>DoubleArrow</a> is configured.</li>
--   <li><tt>&lt;=</tt> turns into <tt>⇐</tt> (U+21D0 LEFTWARDS DOUBLE
--   ARROW) if <a>DoubleArrow</a> is configured.</li>
--   <li><tt>&lt;=&gt;</tt> turns into <tt>⇔</tt> (U+21D4 LEFT RIGHT DOUBLE
--   ARROW) if both <a>DoubleArrow</a> and <a>LeftRight</a> are configured
--   at a time.</li>
--   </ul>
transformArrow :: Set ArrowTransformationOption -> [HtmlEntity] -> [HtmlEntity]

-- | A set of quoting parentheses to be used by <a>quoteCitation</a>
--   function.
--   
--   There are two presets: <a>angleQuotes</a> and <a>cornerBrackets</a>.
--   These both surround titles with a <tt>&lt;cite&gt;</tt> tag. In order
--   to disable surrounded elements, set <a>htmlElement</a> field to
--   <a>Nothing</a>, e.g.:
--   
--   <pre>
--   <a>angleQuotes</a> { <a>htmlElement</a> = <a>Nothing</a> }
--   </pre>
data CitationQuotes
CitationQuotes :: (Text, Text) -> (Text, Text) -> Maybe (HtmlTag, HtmlRawAttrs) -> CitationQuotes

-- | The leading and trailing punctuations to surround a title of novel,
--   newspaper, magazine, movie, television program, etc.
[title] :: CitationQuotes -> (Text, Text)

-- | The leading and trailing punctuations to surround a title of short
--   story, chapter, article, episode, etc.
[subtitle] :: CitationQuotes -> (Text, Text)

-- | Optional pair of an HTML element and its attributes to surround
--   citations. E.g., if it is <tt><a>Just</a> (<a>Cite</a>, "
--   class="autogen")</tt> titles are transformed like <tt>&lt;cite
--   class="autogen"&gt;이런 날&lt;/cite&gt;</tt>.
[htmlElement] :: CitationQuotes -> Maybe (HtmlTag, HtmlRawAttrs)

-- | Pairs of substitute folk single and double quotes. Used by
--   <a>transformQuote</a> function.
--   
--   The are three presets: <a>curvedQuotes</a>, <a>guillemets</a>, and
--   <a>curvedSingleQuotesWithQ</a>:
--   
--   <ul>
--   <li><a>curvedQuotes</a> uses South Korean curved quotation marks which
--   follows English quotes (<tt>‘</tt>: U+2018, <tt>’</tt>: U+2019,
--   <tt>“</tt>: U+201C, <tt>”</tt>: U+201D)</li>
--   <li><a>guillemets</a> uses North Korean angular quotation marks,
--   influenced by Russian guillemets but with some adjustments to replace
--   guillemets with East Asian angular quotes (<tt>〈</tt>: U+3008,
--   <tt>〉</tt>: U+3009, <tt>《</tt>: U+300A, <tt>》</tt>: U+300B).</li>
--   <li><a>curvedSingleQuotesWithQ</a> is the almost same to
--   <a>curvedQuotes</a> but wrap text with a <tt>&lt;q&gt;</tt> tag
--   instead of curved double quotes.</li>
--   </ul>
data Quotes
Quotes :: QuotePair -> QuotePair -> Quotes
[singleQuotes] :: Quotes -> QuotePair
[doubleQuotes] :: Quotes -> QuotePair

-- | A pair of an opening quote and a closing quote.
data QuotePair

-- | Wrap the quoted text with a pair of punctuation characters.
QuotePair :: Text -> Text -> QuotePair

-- | Wrap the quoted text (HTML elements) with an element like
--   <tt>&lt;q&gt;</tt> tag.
HtmlElement :: HtmlTag -> HtmlRawAttrs -> QuotePair

-- | Cite a title using angle quotes, used by South Korean orthography in
--   horizontal writing (橫書), e.g., 《나비와 엉겅퀴》 or 〈枾崎의 바다〉.
angleQuotes :: CitationQuotes

-- | Cite a title using corner brackets, used by South Korean orthography
--   in vertical writing (縱書) and Japanese orthography, e.g., 『나비와 엉겅퀴』 or
--   「枾崎의 바다」.
cornerBrackets :: CitationQuotes

-- | English-style curved quotes (<tt>‘</tt>: U+2018, <tt>’</tt>: U+2019,
--   <tt>“</tt>: U+201C, <tt>”</tt>: U+201D), which are used by South
--   Korean orthography.
curvedQuotes :: Quotes

-- | Use English-style curved quotes (<tt>‘</tt>: U+2018, <tt>’</tt>:
--   U+2019) for single quotes, and HTML <tt>&lt;q&gt;</tt> tags for double
--   quotes.
curvedSingleQuotesWithQ :: Quotes

-- | East Asian guillemets (<tt>〈</tt>: U+3008, <tt>〉</tt>: U+3009,
--   <tt>《</tt>: U+300A, <tt>》</tt>: U+300B), which are used by North
--   Korean orthography.
guillemets :: Quotes

-- | Traditional horizontal corner brackets (<tt>「</tt>: U+300C,
--   <tt>」</tt>: U+300D, <tt>『</tt>: U+300E, <tt>』</tt>: U+300F), which are
--   used by East Asian orthography.
horizontalCornerBrackets :: Quotes

-- | Use horizontal corner brackets (<tt>「</tt>: U+300C, <tt>」</tt>:
--   U+300D) for single quotes, and HTML <tt>&lt;q&gt;</tt> tags for double
--   quotes.
horizontalCornerBracketsWithQ :: Quotes

-- | People tend to cite the title of a work (e.g., a book, a paper, a
--   poem, a song, a film, a TV show, a game) by wrapping inequality
--   symbols like <tt>&lt;&lt;나비와 엉겅퀴&gt;&gt;</tt> or <tt>&lt;枾崎의
--   바다&gt;</tt> instead of proper angle quotes like <tt>《나비와 엉겅퀴》</tt> or
--   <tt>〈枾崎의 바다〉</tt>.
--   
--   This transforms, in the given HTML fragments, all folk-citing quotes
--   into typographic citing quotes:
--   
--   <ul>
--   <li>Pairs of less-than and greater-than inequality symbols
--   (<tt>&lt;</tt> &amp; <tt>&gt;</tt>) into pairs of proper angle quotes
--   (<tt>〈</tt> &amp; <tt>〉</tt>)</li>
--   <li>Pairs of two consecutive inequality symbols (<tt>&lt;&lt;</tt>
--   &amp; <tt>&gt;&gt;</tt>) into pairs of proper double angle quotes
--   (<tt>《</tt> &amp; <tt>》</tt>)</li>
--   </ul>
quoteCitation :: CitationQuotes -> [HtmlEntity] -> [HtmlEntity]

-- | Transform pairs of apostrophes (<tt>'</tt>: U+0027) and straight
--   double quotes (<tt>"</tt>: U+0022) into more appropriate quotation
--   marks like typographic single quotes (<tt>‘</tt>: U+2018, <tt>’</tt>:
--   U+2019) and double quotes (<tt>“</tt>: U+201C, <tt>”</tt>: U+201D), or
--   rather wrap them with an HTML element like <tt>&lt;q&gt;</tt> tag. It
--   depends on the options passed to the first parameter; see also
--   <a>Quotes</a>.
transformQuote :: Quotes -> [HtmlEntity] -> [HtmlEntity]

-- | Vertical corner brackets (<tt>﹁</tt>: U+FE41, <tt>﹂</tt>: U+FE42,
--   <tt>﹃</tt>: U+FE43, <tt>﹄</tt>: U+FE44), which are used by East Asian
--   orthography.
verticalCornerBrackets :: Quotes

-- | Use vertical corner brackets (<tt>﹁</tt>: U+FE41, <tt>﹂</tt>: U+FE42)
--   for single quotes, and HTML <tt>&lt;q&gt;</tt> tags for double quotes.
verticalCornerBracketsWithQ :: Quotes

-- | A set of stops—<a>period</a>, <a>comma</a>, <a>interpunct</a>,
--   <a>questionMark</a>, and <a>exclamationMark</a>—to be used by
--   <a>normalizeStops</a> function.
--   
--   There are three presets: <a>horizontalStops</a>, <a>verticalStops</a>,
--   and <a>horizontalStopsWithSlashes</a>.
data Stops
Stops :: Text -> Text -> Text -> Text -> Text -> Stops
[period] :: Stops -> Text
[comma] :: Stops -> Text
[interpunct] :: Stops -> Text
[questionMark] :: Stops -> Text
[exclamationMark] :: Stops -> Text

-- | Stop sentences in the modern Korean style which follows Western stops.
--   E.g.:
--   
--   <pre>
--   봄·여름·가을·겨울. 어제, 오늘. 새벽? 아침!
--   </pre>
horizontalStops :: Stops

-- | Similar to <a>horizontalStops</a> except slashes are used instead of
--   interpuncts. E.g.:
--   
--   <pre>
--   봄/여름/가을/겨울. 어제, 오늘. 새벽? 아침!
--   </pre>
horizontalStopsWithSlashes :: Stops

-- | Normalizes sentence stops (periods, commas, and interpuncts).
normalizeStops :: Stops -> [HtmlEntity] -> [HtmlEntity]

-- | Until 2015, the National Institute of Korean Language (國立國語院) had
--   allowed to use only ellipses (<tt>…</tt>) for omitted word, phrase,
--   line, paragraph, or speechlessness. However, people tend to use three
--   or more consecutive periods (<tt>...</tt>) instead of a proper
--   ellipsis. Although NIKL has started to allow consecutive periods
--   besides an ellipsis for these uses, ellipses are still a proper
--   punctuation in principle.
--   
--   This transforms, in the given HTML fragments, all three consecutive
--   periods into proper ellipses.
transformEllipsis :: [HtmlEntity] -> [HtmlEntity]

-- | Stop sentences in the pre-modern Korean style which follows Chinese
--   stops. E.g.:
--   
--   <pre>
--   봄·여름·가을·겨울。어제、오늘。새벽？아침！
--   </pre>
verticalStops :: Stops

-- | Transform the following folk em dashes into proper em dashes
--   (<tt>—</tt>: <tt>U+2014 EM DASH</tt>):
--   
--   <ul>
--   <li>A hyphen (<tt>-</tt>: <tt>U+002D HYPHEN-MINUS</tt>) surrounded by
--   spaces.</li>
--   <li>Two or three consecutive hyphens (<tt>--</tt> or
--   <tt>---</tt>).</li>
--   <li>A hangul vowel <tt>ㅡ</tt> (<tt>U+3161 HANGUL LETTER EU</tt>)
--   surrounded by spaces. There are Korean people that use a hangul vowel
--   <tt>ㅡ</tt> ("eu") instead of an em dash due to their ignorance or
--   negligence.</li>
--   </ul>
transformEmDash :: [HtmlEntity] -> [HtmlEntity]
instance GHC.Show.Show Text.Seonbi.Punctuation.CitationQuotes
instance GHC.Classes.Eq Text.Seonbi.Punctuation.CitationQuotes
instance GHC.Show.Show Text.Seonbi.Punctuation.TitlePunct
instance GHC.Classes.Eq Text.Seonbi.Punctuation.TitlePunct
instance GHC.Show.Show Text.Seonbi.Punctuation.Stops
instance GHC.Classes.Eq Text.Seonbi.Punctuation.Stops
instance GHC.Show.Show Text.Seonbi.Punctuation.Ending
instance GHC.Show.Show Text.Seonbi.Punctuation.ArrowTransformationOption
instance GHC.Classes.Ord Text.Seonbi.Punctuation.ArrowTransformationOption
instance GHC.Classes.Eq Text.Seonbi.Punctuation.ArrowTransformationOption
instance GHC.Show.Show Text.Seonbi.Punctuation.QuotePair
instance GHC.Classes.Ord Text.Seonbi.Punctuation.QuotePair
instance GHC.Classes.Eq Text.Seonbi.Punctuation.QuotePair
instance GHC.Show.Show Text.Seonbi.Punctuation.Quotes
instance GHC.Classes.Ord Text.Seonbi.Punctuation.Quotes
instance GHC.Classes.Eq Text.Seonbi.Punctuation.Quotes
instance GHC.Show.Show Text.Seonbi.Punctuation.QuotePunct
instance GHC.Classes.Ord Text.Seonbi.Punctuation.QuotePunct
instance GHC.Classes.Eq Text.Seonbi.Punctuation.QuotePunct


-- | A trie from <a>Text</a> keys to values.
module Text.Seonbi.Trie

-- | A trie from <a>Text</a> keys to <tt>a</tt> values.
data Trie a

-- | Lists all values in the trie. Values are ordered by their associated
--   keys.
elems :: Trie a -> [a]

-- | The empty trie.
empty :: Trie a

-- | Converts a list of associated pairs into a trie. For duplicate keys,
--   values earlier in the list shadow later ones.
fromList :: [(Text, a)] -> Trie a

-- | Inserts a new key into the trie.
insert :: Text -> a -> Trie a -> Trie a

-- | Lists all keys in the trie. Keys will be ordered.
keys :: Trie a -> [Text]

-- | Gets the value associated with a key if it exists.
lookup :: Text -> Trie a -> Maybe a

-- | Checks if a key has a value in the trie.
member :: Text -> Trie a -> Bool

-- | Combines two tries, using a function to resolve collisions. This can
--   only define the space of functions between union and symmetric
--   difference but, with those two, all set operations can be defined
--   (albeit inefficiently).
mergeBy :: (a -> a -> Maybe a) -> Trie a -> Trie a -> Trie a

-- | Checks if the trie is empty.
null :: Trie a -> Bool

-- | Constructs a singleton trie.
singleton :: Text -> a -> Trie a

-- | Gets the number of elements in the trie.
size :: Trie a -> Int

-- | Converts a trie into a list of associated pairs. Keys will be ordered.
toList :: Trie a -> [(Text, a)]

-- | Combines two tries, resolving conflicts by choosing the value from the
--   left (former) trie.
unionL :: Trie a -> Trie a -> Trie a

-- | Combines two tries, resolving conflicts by choosing the value from the
--   right (latter) trie.
unionR :: Trie a -> Trie a -> Trie a
instance GHC.Show.Show a => GHC.Show.Show (Text.Seonbi.Trie.Trie a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Text.Seonbi.Trie.Trie a)
instance GHC.Base.Functor Text.Seonbi.Trie.Trie
instance Data.Foldable.Foldable Text.Seonbi.Trie.Trie
instance Data.Traversable.Traversable Text.Seonbi.Trie.Trie
instance GHC.Base.Applicative Text.Seonbi.Trie.Trie
instance GHC.Base.Monad Text.Seonbi.Trie.Trie
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Text.Seonbi.Trie.Trie a)
instance GHC.Base.Monoid a => GHC.Base.Monoid (Text.Seonbi.Trie.Trie a)
instance GHC.Exts.IsList (Text.Seonbi.Trie.Trie a)

module Text.Seonbi.Unihan.KHangul

-- | Represents character set standards for Korean writing system.
data CharacterSet

-- | KS X 1001 (정보 교환용 부호계).
KS_X_1001 :: CharacterSet

-- | KS X 1002 (정보 교환용 부호 확장 세트).
KS_X_1002 :: CharacterSet

-- | Represents that a Hanja character is not included in any Korean
--   character set standards.
NonStandard :: CharacterSet

-- | All readings of a Hanja character.
type HanjaReadings = Map Char HanjaReadingCitation

-- | Represents what standard a reading of character belongs to and a
--   purpose of the reading.
data HanjaReadingCitation
HanjaReadingCitation :: CharacterSet -> Set Purpose -> HanjaReadingCitation

-- | Maps all Hanja characters to their possible readings.
type KHangulData = Map Char HanjaReadings

-- | Represents purposes of Hanja characters.
data Purpose

-- | Basic Hanja for educational use (漢文敎育用基礎漢字), a subset of Hanja defined
--   in 1972 by a South Korean standard for educational use.
Education :: Purpose

-- | Hanja for personal names (人名用漢字).
PersonalName :: Purpose

-- | Data that map Hanja characters to their corresponding kHangul entries
--   (i.e., Hanja readings and citations).
--   
--   <pre>
--   &gt;&gt;&gt; import Data.Map.Strict as M
--   
--   &gt;&gt;&gt; let Just entries = M.lookup '天' kHangulData
--   
--   &gt;&gt;&gt; entries
--   fromList [('천',HanjaReadingCitation KS_X_1001 (fromList [Education]))]
--   </pre>
kHangulData :: KHangulData
kHangulData' :: Either String KHangulData
instance GHC.Show.Show Text.Seonbi.Unihan.KHangul.CharacterSet
instance GHC.Classes.Ord Text.Seonbi.Unihan.KHangul.CharacterSet
instance GHC.Classes.Eq Text.Seonbi.Unihan.KHangul.CharacterSet
instance GHC.Show.Show Text.Seonbi.Unihan.KHangul.Purpose
instance GHC.Classes.Ord Text.Seonbi.Unihan.KHangul.Purpose
instance GHC.Classes.Eq Text.Seonbi.Unihan.KHangul.Purpose
instance GHC.Show.Show Text.Seonbi.Unihan.KHangul.HanjaReadingCitation
instance GHC.Classes.Ord Text.Seonbi.Unihan.KHangul.HanjaReadingCitation
instance GHC.Classes.Eq Text.Seonbi.Unihan.KHangul.HanjaReadingCitation
instance Data.Aeson.Types.FromJSON.FromJSON Text.Seonbi.Unihan.KHangul.HanjaReadingCitation


-- | This module deals with Chinese characters and Sino-Korean words
--   written in hanja.
module Text.Seonbi.Hanja

-- | Settings to transform Sino-Korean words written in hanja into hangul
--   letters.
data HanjaPhoneticization
HanjaPhoneticization :: HanjaWordPhoneticizer -> HanjaWordRenderer -> HanjaWordRenderer -> Bool -> HanjaPhoneticization

-- | A function to phoneticize a hanja word. Use
--   <a>phoneticizeHanjaWordWithInitialSoundLaw</a> for South Korean
--   orthography, or <a>phoneticizeHanjaWord</a> for North Korean
--   orthography.
[phoneticizer] :: HanjaPhoneticization -> HanjaWordPhoneticizer

-- | A function to render a hanja word. See also <a>HanjaWordRenderer</a>.
[wordRenderer] :: HanjaPhoneticization -> HanjaWordRenderer

-- | A function to render a hanja word which should be disambiguated. It's
--   used instead of <a>wordRenderer</a> when two or more words in a text
--   have the same hangul reading but actually are dictinct each other in
--   hanja characters, e.g., 小數/素數 (소수).
[homophoneRenderer] :: HanjaPhoneticization -> HanjaWordRenderer

-- | Whether to insert some HTML comments that contain useful information
--   for debugging into the result. This does not affect the rendering of
--   the result HTML, but only the HTML code.
[debugComment] :: HanjaPhoneticization -> Bool
def :: Default a => a

-- | Transforms hanja words in the given HTML entities into corresponding
--   hangul words.
phoneticizeHanja :: HanjaPhoneticization -> [HtmlEntity] -> [HtmlEntity]

-- | Reads a hanja character as a hangul character.
--   
--   <pre>
--   &gt;&gt;&gt; phoneticizeHanjaChar '漢'
--   '한'
--   </pre>
--   
--   Note that it does not follow Initial Sound Law (頭音法則):
--   
--   <pre>
--   &gt;&gt;&gt; phoneticizeHanjaChar '六'
--   '륙'
--   </pre>
phoneticizeHanjaChar :: Char -> Char

-- | Represents a dictionary that has hanja keys and values of their
--   corresponding hangul readings, e.g., <tt>[("敗北", "패배")]</tt>.
type HanjaDictionary = Trie Text

-- | A function to phoneticize a Sino-Korean (i.e., hanja) word (漢字語) into
--   hangul letters. See also <a>phoneticizeHanjaWord</a>,
--   <a>phoneticizeHanjaWordWithInitialSoundLaw</a>, and
--   <a>withDictionary</a>.
type HanjaWordPhoneticizer = Text " A Sino-Korean (i.e., hanja) word (漢字語) to phoneticize." -> Text " Hangul letters that phoneticize the given Sino-Korean word."

-- | Reads a hanja word and returns a corresponding hangul word.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; phoneticizeHanjaWord "漢字"
--   "한자"
--   </pre>
--   
--   Note that it does not apply Initial Sound Law (頭音法則):
--   
--   <pre>
--   &gt;&gt;&gt; phoneticizeHanjaWord  "來日"
--   "래일"
--   </pre>
phoneticizeHanjaWord :: HanjaWordPhoneticizer

-- | It is like <a>phoneticizeHanjaWord</a>, but it also applies Initial
--   Sound Law (頭音法則).
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; phoneticizeHanjaWordWithInitialSoundLaw  "來日"
--   "내일"
--   
--   &gt;&gt;&gt; phoneticizeHanjaWordWithInitialSoundLaw  "未來"
--   "미래"
--   </pre>
phoneticizeHanjaWordWithInitialSoundLaw :: HanjaWordPhoneticizer

-- | Reads a hanja word according to the given dictionary, or falls back to
--   the other phoneticizer if there is no such word in the dictionary.
--   
--   It's basically replace one with one:
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedLists -XOverloadedStrings
--   
--   &gt;&gt;&gt; let phone = withDictionary [("自轉車", "자전거")] phoneticizeHanjaWord
--   
--   &gt;&gt;&gt; phone "自轉車"
--   "자전거"
--   </pre>
--   
--   But, if it faces any words or characters that are not registered in
--   the dictionary, it does the best to interpolate
--   prefixes/infixes/suffixes using the fallback phoneticizer:
--   
--   <pre>
--   &gt;&gt;&gt; phone "自轉車道路"
--   "자전거도로"
--   
--   &gt;&gt;&gt; phone "二輪自轉車"
--   "이륜자전거"
--   </pre>
withDictionary :: HanjaDictionary -> HanjaWordPhoneticizer -> HanjaWordPhoneticizer

-- | A function to render a Sino-Korean (i.e., hanja) word (漢字語). Choose
--   one in <a>hangulOnly</a>, <a>hanjaInParentheses</a>, and
--   <a>hanjaInRuby</a>.
type HanjaWordRenderer = HtmlTagStack " Where rendered HTML entities get interleaved into." -> Text " A Sino-Korean (i.e., hanja) word (漢字語) to render." -> Text " Hangul letters that phoneticized the Sino-Korean word." -> [HtmlEntity] " Rendered HTML entities."

-- | Renders a word in hangul-only, no hanja at all (e.g., <tt>안녕히</tt>).
hangulOnly :: HanjaWordRenderer

-- | Renders a word in hangul followed by hanja in parentheses (e.g.,
--   <tt>안녕(安寧)히</tt>).
hanjaInParentheses :: HanjaWordRenderer

-- | Renders a word in <tt><a>ruby</a></tt> tag (e.g.,
--   <tt>&lt;ruby&gt;安寧&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;안녕&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;히</tt>).
--   
--   Please read <a>Use Cases &amp; Exploratory Approaches for Ruby
--   Markup</a> as well for more information.
hanjaInRuby :: HanjaWordRenderer

-- | Converts a hangul character according to Initial Sound Law (頭音法則).
--   
--   <pre>
--   &gt;&gt;&gt; convertInitialSoundLaw '념'
--   '염'
--   </pre>
--   
--   If an input is not a hangul syllable or a syllable is not applicable
--   to the law it returns the given input without change:
--   
--   <pre>
--   &gt;&gt;&gt; convertInitialSoundLaw 'A'
--   'A'
--   
--   &gt;&gt;&gt; convertInitialSoundLaw '가'
--   '가'
--   </pre>
convertInitialSoundLaw :: Char -> Char

-- | The Initial Sound Law (頭音法則) table according to South Korean <i>Hangul
--   Orthography</i> (한글 맞춤법) Clause 5, Section 52, Chapter 6 (第6章52項5節).
--   Keys are an original Sino-Korean sound and values are a converted
--   sound according to the law.
initialSoundLawTable :: Map Char Char

-- | Contains the same contents to <a>initialSoundLawTable</a> except that
--   keys and values are crossed: keys are a converted sound and values are
--   possible original sounds.
initialSoundLawTable' :: Map Char (Set Char)

-- | It's a kind of inverse function of <a>convertInitialSoundLaw</a>,
--   except it returns a set of candidates instead of a single canonical
--   answer because Initial Sound Law (頭音法則) is not a bijective function.
--   
--   <pre>
--   &gt;&gt;&gt; revertInitialSoundLaw '예'
--   fromList "례"
--   
--   &gt;&gt;&gt; revertInitialSoundLaw '염'
--   fromList "념렴"
--   </pre>
--   
--   It returns an empty set if an input is not applicable to the law:
--   
--   <pre>
--   &gt;&gt;&gt; revertInitialSoundLaw '가'
--   fromList ""
--   </pre>
revertInitialSoundLaw :: Char -> Set Char
instance Data.Default.Class.Default Text.Seonbi.Hanja.HanjaPhoneticization


-- | Provides higher-level APIs. Read <a>transformHtmlText</a> function
--   first, and then see also <a>Configuration</a> type.
module Text.Seonbi.Facade

-- | Transforms a given text. <a>Nothing</a> if it fails to parse the given
--   text.
transformHtmlText :: forall (m :: Type -> Type) a. (Monad m, MonadFail m) => Configuration m a -> Text -> m Text

-- | A lazy version of <a>transformHtmlText</a> function.
transformHtmlLazyText :: forall (m :: Type -> Type) a. (Monad m, MonadFail m) => Configuration m a -> Text -> m Text

-- | Transformation settings. For the most cases, you could use one of
--   presets:
--   
--   <ul>
--   <li><a>ko_KR</a></li>
--   <li><a>ko_KP</a></li>
--   </ul>
data Monad m => Configuration m a
Configuration :: Maybe (HtmlEntity -> m a) -> ContentType -> Maybe QuoteOption -> Maybe CiteOption -> Maybe ArrowOption -> Bool -> Bool -> Maybe StopOption -> Maybe HanjaOption -> Configuration m a

-- | An optional debugging logger to print its internal AST.
[debugLogger] :: Configuration m a -> Maybe (HtmlEntity -> m a)

-- | A content type of the input and output. It has to be a member of
--   <a>contentTypes</a>.
[contentType] :: Configuration m a -> ContentType

-- | An option to decide how quotation marks are rendered. If
--   <a>Nothing</a> no quotes are transformed.
[quote] :: Configuration m a -> Maybe QuoteOption

-- | An option to transform folk-citing quotes (e.g.,
--   <tt>&lt;&lt;한겨레&gt;&gt;</tt>) into proper citing quotes (e.g.,
--   <tt>《한겨레》</tt>).
[cite] :: Configuration m a -> Maybe CiteOption

-- | Settings to transform arrow-looking punctuations into proper arrows.
--   If <a>Nothing</a> no arrows are transformed.
[arrow] :: Configuration m a -> Maybe ArrowOption

-- | Whether to transform triple periods into a proper ellipsis.
[ellipsis] :: Configuration m a -> Bool

-- | Whether to transform folk em dashes into proper em dashes.
[emDash] :: Configuration m a -> Bool

-- | Settings to normalize stops (periods, commas, and interpuncts). If
--   <a>Nothing</a> stops are never touched.
[stop] :: Configuration m a -> Maybe StopOption

-- | Settings to deal with Sino-Korean words.
[hanja] :: Configuration m a -> Maybe HanjaOption

-- | Preset <a>Configuration</a> for North Korean orthography.
ko_KP :: Monad m => Configuration m a

-- | Preset <a>Configuration</a> for South Korean orthography.
ko_KR :: Monad m => Configuration m a

-- | A mapping of locale code strings (e.g., <tt>"ko-kr"</tt>) to the
--   corresponding <a>Configuration</a> presets (e.g., <a>ko_KR</a>).
presets :: (Ord k, IsString k, Monad m) => Map k (Configuration m a)

-- | Represents a case-insensitive content type.
type ContentType = MediaType

-- | Converts a <a>Text</a> to a <a>ContentType</a>.
contentTypeFromText :: Text -> Maybe ContentType

-- | Supported content types.
contentTypes :: Set ContentType

-- | Converts a <a>ContentType</a> to a <a>Text</a>.
contentTypeText :: ContentType -> Text

-- | Represents a dictionary that has hanja keys and values of their
--   corresponding hangul readings, e.g., <tt>[("敗北", "패배")]</tt>.
type HanjaDictionary = Trie Text

-- | Loads a dictionary file. The file consists of two-column TSV
--   (tab-separated values); the first column is hanja and the second
--   column is hangul.
readDictionaryFile :: FilePath -> IO HanjaDictionary

-- | Loads <a>Standard Korean Language Dictionary</a> (標準國語大辭典) data.
southKoreanDictionary :: IO HanjaDictionary

-- | Settings to transform arrow-looking punctuations into proper arrows.
data ArrowOption
ArrowOption :: Bool -> Bool -> ArrowOption

-- | Whether to transform bi-directional arrows as well as left/rightwards
--   arrows.
[bidirArrow] :: ArrowOption -> Bool

-- | Whether to transform double arrows as well as single arrows.
[doubleArrow] :: ArrowOption -> Bool

-- | An option to transform folk-citing quotes (e.g.,
--   <tt>&lt;&lt;한겨레&gt;&gt;</tt>) into proper citing quotes (e.g.,
--   <tt>《한겨레》</tt>).
data CiteOption

-- | Cite a title using angle quotes, used by South Korean orthography in
--   horizontal writing (橫書), e.g., 《나비와 엉겅퀴》 or 〈枾崎의 바다〉.
AngleQuotes :: CiteOption

-- | Cite a title using corner brackets, used by South Korean orthography
--   in vertical writing (縱書) and Japanese orthography, e.g., 『나비와 엉겅퀴』 or
--   「枾崎의 바다」.
CornerBrackets :: CiteOption

-- | Same as <a>AngleQuotes</a> except it wraps the title with a
--   <tt>&lt;cite&gt;</tt> tag.
AngleQuotesWithCite :: CiteOption

-- | Same as <a>CornerBrackets</a> except it wraps the title with a
--   <tt>&lt;cite&gt;</tt> tag.
CornerBracketsWithCite :: CiteOption

-- | Settings to deal with Sino-Korean words.
data HanjaOption
HanjaOption :: HanjaRenderingOption -> HanjaReadingOption -> HanjaOption

-- | How to render Sino-Korean words.
[rendering] :: HanjaOption -> HanjaRenderingOption

-- | How to rewrite Sino-Korean words in hangul.
[reading] :: HanjaOption -> HanjaReadingOption

-- | Settings to read Sino-Korean words.
data HanjaReadingOption
HanjaReadingOption :: Bool -> HanjaDictionary -> HanjaReadingOption

-- | Whether to apply Initial Sound Law (頭音法則) or not.
[initialSoundLaw] :: HanjaReadingOption -> Bool

-- | A dictionary which has hanja readings. Keys are hanja words and values
--   are their corresponding hangul readings, e.g.:
--   
--   <pre>
--   [("敗北", "패배"), ("北極", "북극")] :: HanjaDictionary
--   </pre>
[dictionary] :: HanjaReadingOption -> HanjaDictionary

-- | Available options to render Sino-Korean words.
data HanjaRenderingOption

-- | Renders a word in hangul-only, no hanja at all (e.g., <tt>안녕히</tt>).
HangulOnly :: HanjaRenderingOption

-- | Renders a word in hangul followed by hanja in parentheses (e.g.,
--   <tt>안녕(安寧)히</tt>).
HanjaInParentheses :: HanjaRenderingOption

-- | Renders words in hangul-only for the most part, and if there are
--   homophones in a document put their hanja notation in parentheses
--   (e.g., <tt>안녕히</tt> or <tt>소수(小數)와 소수(素數)</tt>).
DisambiguatingHanjaInParentheses :: HanjaRenderingOption

-- | Renders a word in <tt><a>ruby</a></tt> tag (e.g.,
--   <tt>&lt;ruby&gt;安寧&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;안녕&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;히</tt>).
--   
--   Please read <a>Use Cases &amp; Exploratory Approaches for Ruby
--   Markup</a> as well for more information.
HanjaInRuby :: HanjaRenderingOption

-- | An option to decide how quotation marks are rendered.
data QuoteOption

-- | English-style curved quotes (<tt>‘</tt>: U+2018, <tt>’</tt>: U+2019,
--   <tt>“</tt>: U+201C, <tt>”</tt>: U+201D), which are used by South
--   Korean orthography.
CurvedQuotes :: QuoteOption

-- | Vertical corner brackets (<tt>﹁</tt>: U+FE41, <tt>﹂</tt>: U+FE42,
--   <tt>﹃</tt>: U+FE43, <tt>﹄</tt>: U+FE44), which are used by East Asian
--   orthography.
VerticalCornerBrackets :: QuoteOption

-- | Traditional horizontal corner brackets (<tt>「</tt>: U+300C,
--   <tt>」</tt>: U+300D, <tt>『</tt>: U+300E, <tt>』</tt>: U+300F), which are
--   used by East Asian orthography.
HorizontalCornerBrackets :: QuoteOption

-- | East Asian guillemets (<tt>〈</tt>: U+3008, <tt>〉</tt>: U+3009,
--   <tt>《</tt>: U+300A, <tt>》</tt>: U+300B), which are used by North
--   Korean orthography.
Guillemets :: QuoteOption

-- | Use English-style curved quotes (<tt>‘</tt>: U+2018, <tt>’</tt>:
--   U+2019) for single quotes, and HTML <tt>&lt;q&gt;</tt> tags for double
--   quotes.
CurvedSingleQuotesWithQ :: QuoteOption

-- | Use vertical corner brackets (<tt>﹁</tt>: U+FE41, <tt>﹂</tt>: U+FE42)
--   for single quotes, and HTML <tt>&lt;q&gt;</tt> tags for double quotes.
VerticalCornerBracketsWithQ :: QuoteOption

-- | Use horizontal corner brackets (<tt>「</tt>: U+300C, <tt>」</tt>:
--   U+300D) for single quotes, and HTML <tt>&lt;q&gt;</tt> tags for double
--   quotes.
HorizontalCornerBracketsWithQ :: QuoteOption

-- | Settings to normalize stops (periods, commas, and interpuncts) in
--   docs.
data StopOption

-- | Stop sentences in the modern Korean style which follows Western stops.
--   E.g.:
--   
--   <pre>
--   봄·여름·가을·겨울. 어제, 오늘.
--   </pre>
Horizontal :: StopOption

-- | Similar to <a>horizontalStops</a> except slashes are used instead of
--   interpuncts. E.g.:
--   
--   <pre>
--   봄/여름/가을/겨울. 어제, 오늘.
--   </pre>
HorizontalWithSlashes :: StopOption

-- | Stop sentences in the pre-modern Korean style which follows Chinese
--   stops. E.g.:
--   
--   <pre>
--   봄·여름·가을·겨울。어제、오늘。
--   </pre>
Vertical :: StopOption
instance GHC.Show.Show Text.Seonbi.Facade.QuoteOption
instance GHC.Read.Read Text.Seonbi.Facade.QuoteOption
instance GHC.Generics.Generic Text.Seonbi.Facade.QuoteOption
instance GHC.Classes.Eq Text.Seonbi.Facade.QuoteOption
instance GHC.Enum.Enum Text.Seonbi.Facade.QuoteOption
instance GHC.Show.Show Text.Seonbi.Facade.CiteOption
instance GHC.Read.Read Text.Seonbi.Facade.CiteOption
instance GHC.Generics.Generic Text.Seonbi.Facade.CiteOption
instance GHC.Classes.Eq Text.Seonbi.Facade.CiteOption
instance GHC.Enum.Enum Text.Seonbi.Facade.CiteOption
instance GHC.Show.Show Text.Seonbi.Facade.ArrowOption
instance GHC.Generics.Generic Text.Seonbi.Facade.ArrowOption
instance GHC.Classes.Eq Text.Seonbi.Facade.ArrowOption
instance GHC.Show.Show Text.Seonbi.Facade.StopOption
instance GHC.Read.Read Text.Seonbi.Facade.StopOption
instance GHC.Generics.Generic Text.Seonbi.Facade.StopOption
instance GHC.Classes.Eq Text.Seonbi.Facade.StopOption
instance GHC.Enum.Enum Text.Seonbi.Facade.StopOption
instance GHC.Show.Show Text.Seonbi.Facade.HanjaRenderingOption
instance GHC.Read.Read Text.Seonbi.Facade.HanjaRenderingOption
instance GHC.Generics.Generic Text.Seonbi.Facade.HanjaRenderingOption
instance GHC.Classes.Eq Text.Seonbi.Facade.HanjaRenderingOption
instance GHC.Enum.Enum Text.Seonbi.Facade.HanjaRenderingOption
instance GHC.Show.Show Text.Seonbi.Facade.HanjaOption
instance GHC.Show.Show Text.Seonbi.Facade.DictionaryPair
instance GHC.Generics.Generic Text.Seonbi.Facade.DictionaryPair
instance Data.Csv.Conversion.FromRecord Text.Seonbi.Facade.DictionaryPair
instance GHC.Base.Monad m => GHC.Show.Show (Text.Seonbi.Facade.Configuration m a)
instance GHC.Show.Show Text.Seonbi.Facade.HanjaReadingOption
